# The below configuration file is parsed using the libconfig library.
#
# Refer to the official documentation if you need it. Here is a quick breakdown
# of the syntax used.
#
# A value can be set using an equals sign or a colon, the trailing semicolon is optional
# and whitespace is not significant.
#
#   name = value;
#   name: value;
#
# { settings ... }  - curly braces denote a group of settings, and a group can contain
#                     multiple types of configuration
# [ value, ... ]    - square brackets denote an array, and all values within the array
#                     must be of the same configuration type
# ( value, ... )    - parentheses denote a list, and a list can contain multiple groups,
#                     arrays, scalar values or other lists
# /* */, // and #   - treated as comments
# @included "path"  - include another configuration file - useful if you want to split
#                     the configuration into smaller parts
#
# When it comes to syntax highlighting for these kind of configuration files you may
# try Ruby, awk, cucumber, perl, puppet or R.
#


# This section covers named colors and their associated resource strings.
#
# The color names are used as references passed to filters that support it.
# The resource string, specified in full, defines what X resources values
# are going to override said color. This can be used, for example, to load
# specific colors from the resource strings of your favourite window manager.
#
colors = (
	{ name = "background", default = "#222222", resource = "background" },
	{ name = "foreground", default = "#FFFFFF", resource = "foreground" },
	{ name = "step_1.00", default = "#000000", resource = "dusk.marked.bg.color" },
	{ name = "step_0.75", default = "#000000", resource = "dusk.titlesel.bg.color" },
	{ name = "step_0.50", default = "#000000", resource = "dusk.titlesel.bg.color" },
	{ name = "step_0.25", default = "#000000", resource = "dusk.titlenorm.bg.color" },
	{ name = "step_0.00", default = "#000000", resource = "dusk.background" }
)

# This section controls the graphical representation of the lock screen
#
# By default if no filters are used the screen will be black. This can for example
# be set to a solid color similarly to how a normal slock works.
#
#   { effect = "solid_color", params = ( "INIT" ) },
#
# Alternatively a screenshot of the desktop can be used as the base image.
#
#   { effect = "screenshot" },
#
# Or one or more image files can be used as a wallpaper.
#
#   { effect = "wallpaper", params = ( "/path/to/img1.ff", "/path/to/images/" ) },
#
# Below is a list of optional filters that can be applied on top of the base
# background image and their expected parameters.
#
#   bloom                    Glow/bloom effect seen in VHS glare, neon, or CRT
#                            scanlines
#                            - brightness threshold (0-255, default 100),
#                              lower values meaning brighter output)
#                            - blur radius (default 5), performance heavy at
#                              higher values (box-blur based)
#                            - bloom intensity (0.0 to 1.0, default 0.9)
#   block_shuffle            Divide the image into small squares (tiles), and
#                            then rearrange them in a deterministic or
#                            semi-random pattern.
#                            - tile width (default 32)
#                            - tile height (default 32)
#                            - randomize? (0 = reverse order, 1 = random shuffle)
#                            - probability of tile being moved (0.0 to 1.0)
#   blur                     Softens the image
#                            - blur radius, e.g. 5.
#   brightness               Darken or brighten the image.
#                            - brightness multiplier; -255 to 255
#   channels                 Used to keep e.g. only one channel.
#                            - keep red channel (0 or 1)
#                            - keep green channel (0 or 1)
#                            - keep blue channel (0 or 1)
#   chroma_crawl             Oscillating color intensity along scanlines.
#                            - frequency of oscillation
#                            - strength of modulation
#   chroma_drift             Adds horizontal chroma shift. Positive numbers
#                            drift right / down, while negative numbers drift
#                            left / up.
#                            - shift amount for red channel
#                            - shift amount for green channel
#                            - shift amount for blue channel
#                            - horizontal (0) or vertical (1) shift
#   color_bleed              Horizontal spreading of bright colors.
#                            - the bleed radius
#                            - the amount to bleed (strength)
#   contrast                 Changes the contrast of the image.
#                            - contrast multiplier; 1.0 means no change, < 1.0
#                              decreases contrast and > 1.0 increases contrast
#   crt_effect               Aims to create a CRT look. Takes five arguments:
#                            - scanline intensity (0.0 to 1.0, default 0.3)
#                            - flicker strength (0.0 to 0.2, default 0.05)
#                            - phosphor stripes (0 = off, 1 = on)
#                            - invert stripes (0 = off, 1 = on)
#                            - glow intensity (0.0 to 1.0, default 0.25)
#   drop_shadow              Creates a drop shadow effect.
#                            - opacity (0.0 to 1.0, default 0.5)
#                            - angle (-360.0 to 360.0 (degrees), default 45.0)
#                            - distance (default 20.0)
#                            - size (default 12.0)
#                            - noise (0.0 to 1.0, default 0.0)
#                            - blend mode (see wallpapers)
#                            - knockout (0 or 1, whether the filter is allowed
#                              to knock out the pixels the shadow is created for
#                            - optionally a string hex color can be used to set
#                              the tint of the shadow, defaults to black (note
#                              that this can not be a reference to a color in
#                              the colors array; it has to be a hex string,
#                              e.g. #FF0000)
#   dual_kawase_blur         Takes two arguments:
#                            - the number of iterations
#                            - an integer radius
#   emboss (relief)          A relief filter (sometimes called emboss) simulates
#                            depth by detecting edges and shading them as if lit
#                            from a particular angle.
#                            - intensity (scaling of relief, default 1.0)
#                            - direction X offset (e.g. 1)
#                            - direction Y offset (e.g. 1)
#                            - blend strength (0.0 to 1.0, 1.0 replaces fully)
#   film_grain               Adds film grain effect (additive noise).
#                            - noise strength (integer, e.g. ±20 levels)
#   flip                     Flips the image on each monitor.
#                            - flip horizontally? (0 or 1)
#                            - flip vertically? (0 or 1)
#   ghosting                 Blend the image with a shifted copy.
#                            - amount of horizontal ghost offset in pixels
#                            - the blend factor (0.0 to 1.0)
#   gradient_map             Applies a gradient color map based on the luminescence
#                            of each pixel.
#                            - gradient string
#                            - blend strength (0.0 to 1.0, defaults to 1.0)
#                            The gradient string should be in this format:
#                                "step:#hex,step:#hex,...,step:#hex"
#                            The step is a value between 0.0 and 1.0, and the hex is
#                            the color to use at each step. Note that the hex may
#                            also be a named color.
#                            Here is an example gradient string with three steps:
#                                "0:#000000,0.5:#FF0000,1:#FFFFFF"
#                                "0:step_0.00,0.5:step_0.50,1:step_1.00"
#   grayscale                Can optionally take R, G and B coefficients
#                            to control luminance calculation. By default
#                            the Rec. 601 coefficients is used, i.e.
#                            (R × 0.299 + G × 0.587 + B × 0.114).
#                            - red coefficients (default 0.299)
#                            - green coefficients (default 0.587)
#                            - blue coefficients (default 0.114)
#   halftone                 Multi-pattern halftone with blend and jitter.
#                            - period (cell size, default 8)
#                            - angle (degrees, default 0)
#                            - invert (0 = black dots, 1 = white dots)
#                            - blend (0.0 to 1.0)
#                            - jitter (0.0 to 1.0)
#                            - pattern (0 = circle, 1 = line, 2 = diamond)
#   horizontal_tear          Shifts pixels horizontally in a random manner.
#                            - max horizontal shift (default 30 pixels),
#                            - tear probability (chance per row, default 0.02),
#                            - tear height in rows (default 8)
#   hue                      Hue rotation. Rotates colors around the hue wheel
#                            while keeping brightness and saturation.
#                            - hue shift in degrees (0 - 360)
#   image                    Loads an image to be placed on the designated monitor.
#                            This is identical to the wallpaper filter just that it
#                            is intended for smaller images that has transparency
#                            (it could be a custom logo for example). The image is
#                            centered on the designated monitor, but if exact
#                            positioning is desirable then consider creating a
#                            transparent image the size of the screen and control
#                            the placement of the logo that way.
#                            - path to image file or directory
#                            - target monitor (index, primary monitor is 0)
#                            - blend strength (0.0 to 1.0, default 1.0)
#                            - blend mode (default "normal", see wallpaper)
#                            - position ("center", "tile" or "relative")
#                            - relative x position
#                            - relative y position
#   invert                   Takes no arguments.
#   logo                     Draws the logo as defined in the logo section.
#                            - hex or named color to use (e.g. "#00FF00" or "foreground")
#   mask                     Loads an image to be used as an overlay mask, as in an
#                            image that is tiled repeated across all monitors.
#                            This is a variant of the image and wallpaper filters.
#                            - path to image file or directory
#                            - blend strength (0.0 to 1.0, default 1.0)
#                            - blend mode (default "overlay", see wallpaper)
#   modulation_glitch        Applies jitter, color modulation, noise and RGB
#                            separation.
#                            - max jitter (default 10 pixels)
#                            - color modulation strength (default 0.2)
#                            - noise probability per pixel (default 0.01)
#                            - boolean indicating whether to use RGB channel
#                              separation or not
#   noise                    Generates noise, also see soft noise.
#                            - strength (0.0 to 1.0)
#   pixelate                 Pixelates the image based on the block size.
#                            - block size
#   posterize                This filter reduces the number of colors in the image
#                            by specifying the number of levels of colors to keep.
#                            - how many levels of colors to retain (2 or more)
#                            - affect the red channel (0 or 1)
#                            - affect the green channel (0 or 1)
#                            - affect the blue channel (0 or 1)
#   posterize_bit_depth      This filter reduces the bit depth of an image.
#                            The first argument is a number between 1 and 16
#                            indicating how many bits to retain. The remaining
#                            three arguments are booleans indicating whether the
#                            red, green and blue channels are affected.
#                            - how many bits to retain (1 to 16) - lower numbers
#                              have more effect and specifying 16 have no effect
#                            - affect the red channel (0 or 1)
#                            - affect the green channel (0 or 1)
#                            - affect the blue channel (0 or 1)
#   rain_shift_vert          The aim of this filter is to give some distortion
#                            that may resemble rain.
#                            - maximum pixel shift
#   rain_shift_horz          As above, just that the shift is horizontal.
#   root_wallpaper           Attempts to use the existing wallpaper as the base
#                            image.
#                            Takes no arguments.
#   saturation               Adjusts color saturation.
#                            - saturation multiplier; 1.0 means no change,
#                              < 1.0 decreases and > 1.0 increases saturation
#   scanlines                Adds scanlines:
#                            - spacing (pixels)
#                            - intensity (between 0.0 and 1.0), where lower
#                              numbers are more intense
#   screenshot               Takes a screenshot of the current desktop. Takes no
#                            arguments.
#   sobel                    Used for edge detection. Identifies object boundaries
#                            by calculating the gradient magnitude of pixel intensity
#                            changes. It uses two 3x3 convolution kernels to
#                            approximate the horizontal and vertical derivatives
#                            of an image, then combines these to highlight edges
#                            where intensity changes abruptly.
#                            Takes no arguments.
#   soft_noise               Generates softer noise.
#                            - amount > 0.0
#                            - strength between 0.0 and 1.0 and
#                            - an integer radius
#   solid_color              Paints the entire screen a solid color.
#                            - hex or named color to use (e.g. "#FF0000" or "background")
#   temperature              Adjusts the color balance to make the image colder
#                            or warmer. Takes one argument which is the
#                            temperature in kelvin.
#                            - kelvin (range 1000K to 40000K), where 2000 is very
#                              warm (orange), 6500 is neutral white (daylight),
#                              and 10000 is cool (giving a blue tint)
#                            - blend strength (0.0 to 1.0)
#   tint                     Blend each pixel with a given tint color.
#                            - red (0-255)
#                            - green (0-255)
#                            - blue (0-255)
#                            - blend strength (0.0 to 1.0)
#   vignette                 Adds a vignette around all monitors
#                            - overall strength (0.0 to 1.0, default 0.5),
#                              lower values meaning darker vignette
#                            - horizontal edge fraction (default 0.1)
#                            - vertical edge fraction (default 0.1)
#                            - corner radius (default 50)
#                            - smoothness exponent (default 2.0)
#   vhs_jitter               Simulates the VHS jitter effect.
#                            - max offset for the jitter
#   vhs_warp_chroma          Adds VHS distortion.
#                            - the height of the band to affect
#                            - the maximum shift
#                            - the minimum length of the distortion
#                            - boolean to indicate whether to affect the RGB
#                              channels independently (like chroma shift)
#   wallpaper                Uses an image as a wallpaper (base background).
#                            Takes one or more paths to image files to load, one
#                            for each monitor (ordered as per xrandr). The path can
#                            either be to an explicit file, or it can be a directory
#                            in which a random file will be chosen. Note that the
#                            wallpapers do not scale, but will center and crop if
#                            the wallpaper is too large. By default support for
#                            loading farbfeld (.ff) images is integrated, but if
#                            dack is compiled with imlib2 support then other file
#                            types can be loaded as well (e.g. .png, .jpg).
#                            - one or more paths to a file or directory
#                            - blend strength (0.0 to 1.0), optionally the wallpaper
#                              can be blended with the underlying image - this can
#                              be useful if you have a custom overlay
#                            - blend mode (default "normal") - the blending modes
#                              available are:
#                                normal    linear_burn   soft_light    hsv_hue
#                                multiply  linear_dodge  hard_light    hsv_saturation
#                                screen    color_burn    linear_light  hsv_luminosity
#                                overlay   color_dodge   pin_light     hsv_color
#                                darken    color_erase   vivid_light   lch_hue
#                                lighten   add           difference    lch_chroma
#                                hard_mix  subtract      exclusion     lch_color
#                                behind    divide        dissolve      lch_lightness
#                                merge     replace       attrition     grain_extract
#                                split     min           erase         grain_merge
#                                          max
#   wave_distortion          Generates wave distortion.
#                            - max horizontal shift
#                            - wave frequency
#                            - phase offset
#
background:
{
	filters = (
		{ effect = "wallpaper", params = ( "/path/to/wallpapers/" ) },
		{ effect = "film_grain", params = ( 20 ) },
		{ effect = "saturation", params = ( 0.0 ) },
		{ effect = "brightness", params = ( 8.0 ) },
		{ effect = "halftone", params = ( 8, 45, 1, 0.1, 0.0, 0) },
		{ effect = "posterize", params = ( 7, 1, 1, 1 ) },
		{ effect = "gradient_map", params = ( "0:step_0.00,0.25:step_0.25,0.5:step_0.50,0.75:step_0.75,1:step_1.00" ) }
	);
}

# When the logo filter is used the below settings control
# the size, positioning and shape of the logo.
logo:
{
	# Size of each pixel of the logo
	size = 20;
	# This is a list of rectangles that will be drawn to make up the logo.
	# It is a grid pattern with scale 1:1 and the settings here make
	# up the logo "dusk".
	rectangles = (
		#  x   y   w   h #
		(  0,  3,  1,  3 ), # d
		(  1,  3,  2,  1 ), # d
		(  0,  5,  4,  1 ), # d
		(  3,  0,  1,  5 ), # d
		(  5,  5,  4,  1 ), # u
		(  5,  3,  1,  2 ), # u
		(  8,  3,  1,  2 ), # u
		( 10,  3,  4,  1 ), # s
		( 10,  5,  4,  1 ), # s
		( 15,  0,  1,  6 ), # k
		( 15,  0,  1,  6 ), # k
		( 16,  3,  2,  1 ), # k
		( 18,  2,  1,  1 ), # k
		( 18,  4,  1,  2 )  # k
	);
}
